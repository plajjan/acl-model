module ietf-access-control-list {
  namespace "urn:ietf:params:xml:ns:yang:ietf-access-control-list";
  prefix acl;
  import ietf-yang-types {
    prefix yang;
  }
  import ietf-packet-fields {
    prefix packet-fields;
  }
  organization 
    "IETF NETMOD (NETCONF Data Modeling Language)
     Working Group";
  
  contact
    "WG Web: http://tools.ietf.org/wg/netmod/
    WG List: netmod@ietf.org
    Editor: Dean Bogdanovic
    ivandean@gmail.com
    Editor: Mahesh Jethanandani
    mahesh@cisco.com
    Editor: Lisa Huang
    lyihuang16@gmail.com
    Editor: Sonal Agarwal
    agarwaso@cisco.com";
  
  description
    "This YANG module defines a component that describing the
    configuration of Access Control Lists (ACLs).
    Copyright (c) 2016 IETF Trust and the persons identified as
    the document authors.  All rights reserved.
    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD
    License set forth in Section 4.c of the IETF Trust's Legal
    Provisions Relating to IETF Documents
    (http://trustee.ietf.org/license-info).
    This version of this YANG module is part of RFC XXXX; see
    the RFC itself for full legal notices.";
  
  revision YYYY-MM-DD {
    description
      "Added feature and identity statements for different types
       of rule matches. Split the matching rules based on the
       feature statement and added a must statement within
       each container.";
    reference
      "RFC XXX: Network Access Control List (ACL) YANG Data Model.";
  }
  
  revision 2016-10-12 {
    description
      "Base model for Network Access Control List (ACL).";
    reference
      "RFC XXXX: Network Access Control List (ACL)
      YANG Data  Model";
  }
  
  /*
   * Identities
   */
  identity acl-base {
    description
      "Base Access Control List type for all Access Control List type
      identifiers.";
  }

  identity ipv4-acl {
    base acl:acl-base;
    description
       "ACL that can match on fields from the IPv4 header (e.g. IPv4
       destination address) and layer 4 headers (e.g. TCP destination
       port). Matching on L2 headers or L3 headers other than IPv4 is
       not possible.";
  }

  identity ipv6-acl {
    base acl:acl-base;
    description
      "ACL that can match on fields from the IPv6 header (e.g. IPv6
      destination address) and layer 4 headers (e.g. TCP destination
      port). Matching on L2 headers or L3 headers other than IPv6 is not
      possible.";
  }

  identity ipv46-acl {
    base acl:acl-base;
    description
      "ACL that can match on fields from an IPv4 or IPv6 header (e.g.
      IPv4 destination address or IPv6 destination address) and layer 4
      headers (e.g. TCP destination port). Matching on L2 headers or L3
      headers other than IPv4 or IPv6 is not possible.";
  }

  identity eth-acl {
    base acl:acl-base;
    description
      "ACL that can match on fields in the Ethernet header. Matching on
      L3 or L4 headers is not possible.";
  }

  identity eth-ipv4-acl {
    base "acl:acl-base";
     
    description 
      "ACL that can match on fields in the Ethernet header, IPv4 header
      and in L4 headers. Matching on L2 headers other than Ethernet
      or matching on L3 headers other than IPv4 is not possible.";
  }

  identity eth-ipv6-acl {
    base "acl:acl-base";
     
    description 
      "ACL that can match on fields in the Ethernet header, IPv6 header
      and in L4 headers. Matching on L2 headers other than Ethernet
      or matching on L3 headers other than IPv6 is not possible.";
  }

  identity eth-ipv46-acl {
    base "acl:acl-base";
     
    description 
      "ACL that can match on fields in the Ethernet header, from an IPv4
      or IPv6 header and layer 4 headers.";
  }
  
  identity tcp-fields {
    base "acl:acl-base";
  }
  
  identity udp-fields {
    base "acl:acl-base";
  }
  
  identity icmp-fields {
    base "acl:acl-base";
  }
  
  identity any-acl {
	base "acl:acl-base";
	  
    description
	  "ACL that can contain any pattern to match upon";
  }

  /*
   * Features
   */
   feature eth-acl {
     description
       "ACL matching on Layer 2 Ethernet supported";
   }

   feature ipv4-acl {
     description 
       "ACL matching on Layer 3 IPv4 supported";
   }
	
   feature ipv6-acl {
     description
       "ACL matching on Layer 3 IPv6 supported";
   }

   feature ipv46-acl {
     description
       "ACL matching on Layer 3 IPv4 and IPv6 supported";
   }
	
   feature eth-ipv4-acl {
     description
       "ACL matching on Layer 2 Ethernet and Layer 3 IPv4 supported";
   }
	
   feature eth-ipv6-acl {
     description
       "ACL matching on Layer 2 Ethernet and Layer 3 IPv6 supported";
   }
	
   feature eth-ipv46-acl {
     description
       "ACL matching on Layer 2 Ethernet and Layer 3 IPv4 and IPv6 supported";
   }
   
   feature tcp-fields {
     description
       "TCP header matching supported.";
   }
   
   feature udp-fields {
     description
       "UDP header matching supported.";
   }
   
   feature icmp-fields {
     description
       "ICMP header matching supported.";
   }
   
   feature any-acl {
	 description
	   "ACL for any pattern.";
   }

  /*
   * Typedefs
   */
  typedef acl-type {
    type identityref {
      base acl-base;
    }
    description
      "This type is used to refer to an Access Control List
      (ACL) type";
  }

  typedef access-control-list-ref {
    type leafref {
      path "/access-lists/acl/acl-name";
    }
    description
      "This type is used by data models that need to reference an
      Access Control List";
  }

  /*
   * Configuration data nodes
   */
  container access-lists {
    description
      "This is a top level container for Access Control Lists.
       It can have one or more Access Control Lists.";
    list acl {
      key "acl-type acl-name";
      description
        "An Access Control List(ACL) is an ordered list of
         Access List Entries (ACE). Each Access Control Entry has a
         list of match criteria and a list of actions.
         Since there are several kinds of Access Control Lists
         implemented with different attributes for
         different vendors, this
         model accommodates customizing Access Control Lists for
         each kind and for each vendor.";
      leaf acl-name {
        type string;
        description
          "The name of access-list. A device MAY restrict the length
           and value of this name, possibly space and special
           characters are not allowed.";
      }
      leaf acl-type {
        type acl-type;
        description
          "Type of access control list. Indicates the primary intended
           type of match criteria (e.g. ethernet, IPv4, IPv6, mixed, etc)
           used in the list instance.";
      }
      container acl-oper-data {
        config false;
        description
          "Overall Access Control List operational data";
      }
      container access-list-entries {
        description
          "The access-list-entries container contains
           a list of access-list-entries(ACE).";
        list ace {
          key "rule-name";
          ordered-by user;
          description
            "List of access list entries(ACE)";
          leaf rule-name {
            type string;
            description
              "A unique name identifying this Access List
               Entry(ACE).";
          }

          container matches {
            description
              "The rules in this set determine what fields will be 
               matched upon before any action is taken on them. 
               The rules are selected based on the feature set 
               defined by the server and the acl-type defined.";

            container ipv4-acl {
              if-feature ipv4-acl;
	          must "../../../../acl-type = 'ipv4-acl'";
	          uses packet-fields:acl-ip-header-fields;
	          uses packet-fields:acl-ipv4-header-fields;
              description
                "Rule set that supports IPv4 headers.";
            }

            container ipv6-acl {
              if-feature ipv6-acl;
              must "../../../../acl-type = 'ipv6-acl'";
              uses packet-fields:acl-ip-header-fields;
              uses packet-fields:acl-ipv6-header-fields;
              description
                "Rule set that supports IPv6 headers.";
            }

            container ipv46-acl {
              if-feature ipv46-acl;
              must "../../../../acl-type = 'ipv46-acl'";
              uses packet-fields:acl-ip-header-fields;
              uses packet-fields:acl-ipv4-header-fields;
              uses packet-fields:acl-ipv6-header-fields;
              description
                "Rule set that is a logical OR (||) of IPv4 and IPv6 headers.";
            }
            
            container eth-acl {
              if-feature eth-acl;
              must "../../../../acl-type = 'eth-acl'";
              uses packet-fields:acl-eth-header-fields;
              description
                "Rule set for L2 Ethernet ACL.";
            }

            container eth-ipv4-acl {
              if-feature eth-ipv4-acl;
              must "../../../../acl-type = 'eth-ipv4-acl'";
              uses packet-fields:acl-eth-header-fields;
	          uses packet-fields:acl-ip-header-fields;
	          uses packet-fields:acl-ipv4-header-fields;
              description
                "Rule set that is a logical AND (&&) of L2 Ethernet and
                 IPv4 headers.";
            }

            container eth-ipv6-acl {
              if-feature eth-ipv6-acl;
              must "../../../../acl-type = 'eth-ipv6-acl'";
              uses packet-fields:acl-eth-header-fields;
              uses packet-fields:acl-ip-header-fields;
              uses packet-fields:acl-ipv6-header-fields;
              description
                "Rule set that is a logical AND (&&) of L2 Ethernet &&
                IPv6 headers.";
            }

            container eth-ipv46-acl {
              if-feature eth-ipv46-acl;
              must "../../../../acl-type = 'eth-ipv46-acl'";
              uses packet-fields:acl-eth-header-fields;
              uses packet-fields:acl-ip-header-fields;
              uses packet-fields:acl-ipv4-header-fields;
              uses packet-fields:acl-ipv6-header-fields;
              description
                "Rule set that is a logical AND (&&) of L2 Ethernet &&
                 (IPv4 || IPv6) headers.";
            }
            
            container tcp-fields {
              if-feature tcp-fields;
              uses packet-fields:acl-tcp-header-fields;
              description
                "Rule set that defines TCP headers.";
            }
            
            container udp-fields {
              if-feature udp-fields;
              uses packet-fields:acl-udp-header-fields;
              description
                "Rule set that defines UDP headers.";
            }
            
            container icmp-fields {
              if-feature icmp-fields;
              uses packet-fields:acl-icmp-header-fields;
              description
                "Rule set that defines ICMP headers.";
            }
             
            container any-acl {
              if-feature any-acl;
              must "../../../../acl-type = 'any-acl'";
              presence "Matches any";
              description
                "Rule set that allows for a any ACL.";
            }
          }

          container actions {
            description
              "Definitions of action criteria for this Access List
               Entry.";
            choice packet-handling {
              default "deny";
              description
                "Packet handling action.";
              case deny {
                leaf deny {
                  type empty;
                  description
                    "Deny action.";
                }
              }
              case permit {
                leaf permit {
                  type empty;
                  description
                    "Permit action.";
                }
              }
            }
            leaf logging {
              type boolean;
              description
                "Log the rule on which the match occured.";
            }
          }
          /*
           * Operational state data nodes
           */
          container ace-oper-data {
            config false;
            description
              "Operational data for this Access List Entry.";
            leaf match-counter {
              type yang:counter64;
              description
                "Number of matches for this Access List Entry";
            }
          }
        }
      }
    }
  }
}
